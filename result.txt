hcxx1.exe intelxx.dll
target 32 bit GNU code
vine linux x86
g++ (10.2.0) -g
bison (2.4.3)
flex (2.5.35)
begin 2021.05.09.05.03
ISO_IEC_9899 0/2822
C2nd 0/156
optimization 0/106
ISO_IEC_14882 3/945                3 failures : See dynamic_cast_bug.txt
end 2021.05.09.05.21
--------------------------
hcxx1.exe intelxx.dll
target 32 bit GNU code
vine linux x86
g++ (10.2.0) -O3
bison (2.4.3)
flex (2.5.35)
begin 2020.08.02 11:57
ISO_IEC_9899 0/2801
C2nd 0/156
optimization 0/82
ISO_IEC_14882 1/568 1 failure for implementing exception handler
end 2020.08.02 12:11
--------------------------
hcxx1.exe intelxx.dll
target 64 bit GNU code
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.05.08.17.32
ISO_IEC_9899 0/2822
C2nd 0/156
optimization 0/106
ISO_IEC_14882 5/939            5 failures : Bug #23
end 2021.05.08.20.57
--------------------------
hcxx1.exe intelxx.dll
target 64 bit GNU code
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.20.17.17
ISO_IEC_9899 0/2822
C2nd 0/156
optimization 0/106
ISO_IEC_14882 5/939            5 failures : Bug #23
end 2020.12.05.09.52
--------------------------
hcxx1.exe intelxx.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.15.18.45
ISO_IEC_9899 5/2822            5 lofs were updated
C2nd 0/156
optimization 0/106
ISO_IEC_14882 7/933            1 failure  : Bug #31
                               5 failures : Bug #23
			       1 lof was updated
end 2021.05.16.00.24
---------------------------
hcxx1.exe intelxx.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.09.18.37
ISO_IEC_9899 0/2822
C2nd 0/156
optimization 0/106
ISO_IEC_14882 6/939
                               5 failures : Bug #23
			       1 failure : Bug #34
end 2021.06.09.23.44
--------------------------
hcxx1.exe intelxx.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.05.22.17.25
ISO_IEC_9899 0/2822
C2nd 0/156
optimization 0/106
ISO_IEC_14882 5/929           5 failures : Bug #23
end 2021.05.22.23.15
--------------------------
hcxx1.exe intelxx.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.7.7 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.12.11.04.22
ISO_IEC_9899 0/2803
C2nd 0/156
optimization 0/82
ISO_IEC_14882 0/605
end 2020.12.11.07.46
--------------------------
hcxx1.exe printf_chkxx.dll
vine linux x86
g++ (10.2.0) -g
bison (2.4.3)
flex (2.5.35)
begin 2021.04.25.17.59
ISO_IEC_9899 0/2844
C2nd 0/154
optimization 0/106
ISO_IEC_14882 0/944
end 2021.04.25.18.07
--------------------------
hcxx1.exe printf_chkxx.dll
vine linux x86
g++ (10.2.0) -O3
bison (2.4.3)
flex (2.5.35)
begin 2020.08.02 12:19
ISO_IEC_9899 0/2823
C2nd 0/154
optimization 0/82
ISO_IEC_14882 0/567
end 2020.08.02 12:24
--------------------------
hcxx1.exe printf_chkxx.dll
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.04.21.18.05
ISO_IEC_9899 0/2844
C2nd 0/154
optimization 0/106
ISO_IEC_14882 0/938
end 2021.04.21.18.05
--------------------------
hcxx1.exe printf_chkxx.dll
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.21.18.29
ISO_IEC_9899 0/2844
C2nd 0/154
optimization 0/106
ISO_IEC_14882 0/938
end 2021.12.06.21.20.13
--------------------------
hcxx1.exe printf_chkxx.dll
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.18.18.41
ISO_IEC_9899 0/2844
C2nd 0/154
optimization 0/106
ISO_IEC_14882 0/938
end 2021.05.18.22.05
--------------------------
hcxx1.exe printf_chkxx.dll
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.10.18.27
ISO_IEC_9899 0/2844
C2nd 0/154
optimization 0/106
ISO_IEC_14882 0/938
end 2021.06.10.20.39
--------------------------
hcxx1.exe printf_chkxx.dll
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.05.24.18.45
ISO_IEC_9899 0/2844
C2nd 0/154
optimization 0/106
ISO_IEC_14882 1/938      Bug #32
end 2021.05.24.22.06
--------------------------
hcxx1.exe printf_chkxx.dll
Windows 10 64 bit
Visual Studio 2019 16.8.2 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.12.11.18.13
ISO_IEC_9899 0/2825
C2nd 0/154
optimization 0/82
ISO_IEC_14882 1/604   1 failure : Bug #5
end 2020.12.11.19.41
--------------------------
hcxx1.exe tacsimxx.dll
vine linux x86
g++ (10.2.0) -g
bison (2.4.3)
flex (2.5.35)
begin 2021.05.26.10.56
ISO_IEC_9899 0/2780
C2nd 0/156
optimization 0/106
ISO_IEC_14882 2/942		See dynamic_cast_bug.txt
	      			But test008.cpp is PASS because of
				tacsimxx.dll environment
end 2021.05.26.11.09
--------------------------
hcxx1.exe tacsimxx.dll
vine linux x86
g++ (10.2.0) -O3
bison (2.4.3)
flex (2.5.35)
begin 2020.08.02 12:32
ISO_IEC_9899 0/2777
C2nd 0/156
optimization 0/82
ISO_IEC_14882 2/565 1 failure : See Bug #9
end 2020.08.02 12:38
--------------------------
hcxx1.exe tacsimxx.dll
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.04.21.21.38
ISO_IEC_9899 0/2780
C2nd 0/156
optimization 0/106
ISO_IEC_14882 3/936               3 failures : See dynamic_cast_bug.txt
                                  NOTE : test008.cpp is not PASS
end 2021.04.21.23.45
--------------------------
hcxx1.exe tacsimxx.dll
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.21.21.01
ISO_IEC_9899 0/2780
C2nd 0/156
optimization 0/106
ISO_IEC_14882 4/936                dynamic_cast tes00[89] test010
                                   Bug #5
end 2021.06.21.23.24
--------------------------
hcxx1.exe tacsimxx.dll
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.19.18.55
ISO_IEC_9899 0/2780
C2nd 0/155
optimization 0/106
ISO_IEC_14882 4/936                1 diff : Bug #9
                                   2 runtime erorr and 1 diff :
				   See dynamic_cast_bug.txt
end 2021.05.20.06.37
--------------------------
hcxx1.exe tacsimxx.dll
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.10.21.11
ISO_IEC_9899 0/2780
C2nd 0/155
optimization 0/82
ISO_IEC_14882 3/932                3 failures. See dynamic_cast_bug.txt
end 2021.06.11.00.45
--------------------------
hcxx1.exe tacsimxx.dll
Winddows 10 64 bit
Visual Studio 2019 16.9.6 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.05.25.19.02
ISO_IEC_9899 0/2780
C2nd 0/155
optimization 0/106
ISO_IEC_14882 3/936               hcxx1.exe test009.i runtime error
				  1 diff dynamic_cast test010.log
				  1 diff Bug #9
end 2021.05.26.07.11
--------------------------
hcxx1.exe tacsimxx.dll
Winddows 10 64 bit
Visual Studio 2019 16.7.7 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.12.12.06.06
ISO_IEC_9899 0/2779
C2nd 0/155
optimization 0/82
ISO_IEC_14882 2/602           Bug #13, Bug #14
end 2020.12.12.08.41
--------------------------
hcxx1.exe intelxx.dll
target 64 bit MS code
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.05.09.17.44
ISO_IEC_9899 1/2816         1 process(vs_wrapper) was killed
C2nd 0/154
optimization 0/106
ISO_IEC_14882 9/938       8 failures : dynamic_cast
                             test00[2356789].exe test010.exe runtime error
                          1 failure
                          0_Exception_handling/1_ok/test007.exe
                            runtime error  -> Bug #29

d:/cygwin64/tmp/43_ISO_IEC_14882.log.04.22.19.58
end 2021.05.10.08.51
--------------------------
hcxx1.exe intelxx.dll
target 64 bit MS code
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.22.17.52
ISO_IEC_9899 0/2816
C2nd 0/154
optimization 0/106
ISO_IEC_14882 9/938       8 failures : dynamic_cast
                             test00[2356789].exe test010.exe runtime error
                          1 failure
                          0_Exception_handling/1_ok/test007.exe
                            runtime error  -> Bug #29
end 2021.06.23.09.17
--------------------------
hcxx1.exe intelxx.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2020.05.20.18.11
ISO_IEC_9899 1/2816    1 (vs_wrapper) process was killed
2nd 0/154
optimization 0/106
ISO_IEC_14882 11/938        8 failures : dynamic_cast
                             test00[2356789].exe test010.exe runtime error
                            2 processes (vs_wrapper) was killed
			    0_Exception_handling/1_ok/test007.exe
                            runtime error  -> Bug #29
end 2020.05.21.15.35
--------------------------
hcxx1.exe intelxx.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.11.18.43
ISO_IEC_9899 0/2816
C2nd 0/154
optimization 0/106
ISO_IEC_14882 9/938        8 failures : dynamic_cast
                             test00[2356789].exe test010.exe runtime error
			    0_Exception_handling/1_ok/test007.exe
                            runtime error  -> Bug #29
end 2021.06.12.07.50
--------------------------
hcxx1.exe intelxx.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.05.28.18.02
ISO_IEC_9899 1/2816           1 process(vs_wrapper) was killed
2nd 0/154
optimization 0/106
ISO_IEC_14882 11/938          dynamic_cast
			      test00[2356789].exe and test010.exe runtime error
			      1 vs_wrapper was killed
    			      0_Exception_handling/1_ok/test007.exe
                              runtime error  -> Bug #29
			      Bug #33 -> Fixed
end 2021.05.29.15.12
--------------------------
hcxx1.exe intelxx.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.8.2 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.12.14.03.10
ISO_IEC_9899 5/2797   1 failure : Bug #3
                      3 process was killed
		      1 diff : test.lof.cxx1.ms was updated
2nd 0/154
optimization 0/82
ISO_IEC_14882 0/604
end 2020.12.14.13.17
--------------------------
hcxx1.exe intelxx.dll
target 32 bit MS code
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.05.07.17.25
ISO_IEC_9899 0/2816
C2nd 0/154
optimization 1/106    diff test019
ISO_IEC_14882 8/939   8 failures : dynamic_cast
                            test00[2356789].exe test010.exe runtime error
end 2021.05.08.08.00
--------------------------
hcxx1.exe intelxx.dll
target 32 bit MS code
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.23.18.36
ISO_IEC_9899 0/2816
C2nd 1/154            Bug #35
optimization 1/106    diff test019
ISO_IEC_14882 8/938   8 failures : dynamic_cast
                            test00[2356789].exe test010.exe runtime error
end 12.07.16.27
--------------------------
hcxx1.exe intelxx.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.21.17.37
ISO_IEC_9899 9/2817   9 processes were killed
                      7 (vs_wrapper) 1 (hcpp.exe) 1 (hcxx1.exe)
2nd 0/154
optimization 1/106    diff test019
ISO_IEC_14882 15/939   8 failures : dynamic_cast
                            test00[2356789].exe test010.exe runtime error
		       7 processes were killed
		       6 (vs_wrapper) 1(hcxx1.exe)
end 2021.05.22.16.15
--------------------------
hcxx1.exe intelxx.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.12.18.06
ISO_IEC_9899 1/2838     1 process(vs_wrapper) was killed
C2nd 0/154
optimization   1/106    1 diff test019.lof
ISO_IEC_14882 8/938     8 failures : dynamic_cast
end 2021.06.13.06.51
--------------------------
hcxx1.exe intelxx.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.12.19.05.11
ISO_IEC_9899 1/2816   1 process(vs_wrapper) was killed
C2nd 1/155            1 process(hcpp) was killed
optimization 1/106    1 diff
ISO_IEC_14882 11/938  8 failures dynamic_cast
                      1 failure Bug #5
		      2 processes(vs_wrapper) were killed
end 2021.05.30.15.57
--------------------------
hcxx1.exe intelxx.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.8.2 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.12.15.04.34
ISO_IEC_9899 6/2797   Bug #3 Bug #6 Bug #7
C2nd 0/154
optimization 0/82
ISO_IEC_14882 0/604
end 2020.12.15.14.40
--------------------------
hcc1.exe intel.dll
target 32 bit GNU code
vine linux x86
g++ (10.2.0) -g
bison (2.4.3)
flex (2.5.35)
begin 2021.05.05.17.45
ISO_IEC_9899 0/2863
C2nd 0/157
optimization 0/106
end 2021.05.05.17.56
--------------------------
hcc1.exe intel.dll
target 32 bit GNU code
vine linux x86
g++ (10.2.0) -O3
bison (2.4.3)
flex (2.5.35)
begin 2020.08.02 10:48
ISO_IEC_9899 0/2842
C2nd 0/157
optimization 0/82
end 2020.08.02 11:57
--------------------------
hcc1.exe intel.dll
target 64 bit GNU code
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.04.25.18.10
ISO_IEC_9899 6/2863      5 lof were updated
                         Bug #28
C2nd 0/157
optimization 0/106
end 2021.04.25.20.37
--------------------------
hcc1.exe intel.dll
target 64 bit GNU code
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.24.18.48
ISO_IEC_9899 2/2863         Bug #36
C2nd 0/157
optimization 0/106
end 2021.06.24.22.09
--------------------------
hcc1.exe intel.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.10.17.52
ISO_IEC_9899 5/2862            5 lof were updated
C2nd 0/157
optimization 0/106
end 2021.05.10.22.02
--------------------------
hcc1.exe intel.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.04.18.22
ISO_IEC_9899 0/2863
C2nd 0/157
optimization 0/106
end 2021.06.04.21.25
--------------------------
hcc1.exe intel.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.7.7 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.11.10.20.34
ISO_IEC_9899 1/2844 See Bug #2
C2nd 0/157
optimization 0/82
end 2020.11.11.00.14
--------------------------
hcc1.exe intel.dll
target 64 bit GNU code
Windows 10 64 bit
Visual Studio 2019 16.10.1 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.13.17.58
ISO_IEC_9899 0/2863
C2nd 0/157
optimization 0/106
end 2021.06.13.21.48
--------------------------
hcc1.exe printf_chk.dll
vine linux x86
g++ (10.2.0) -g
bison (2.4.3)
flex (2.5.35)
begin 2021.04.25.11.14
ISO_IEC_9899 0/2885
C2nd 0/155
optimization 0/106
end 2021.04.25.11.19
--------------------------
hcc1.exe printf_chk.dll
vine linux x86
g++ (10.2.0) -O3
bison (2.4.3)
flex (2.5.35)
begin 2020.08.02 12:15
ISO_IEC_9899 0/2864
C2nd 0/155
optimization 0/82
end 2020.08.02 12:19
--------------------------
hcc1.exe printf_chk.dll
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.04.16.18.11
ISO_IEC_9899 2/2885           See Bug #26, Bug #27
C2nd 0/155
optimization 0/106
end 2021.04.16.19.25
--------------------------
hcc1.exe printf_chk.dll
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.25.18.46
ISO_IEC_9899 1/2885           Bug #37
C2nd 0/155
optimization 0/106
end 2021.06.25.20.05
--------------------------
hcc1.exe printf_chk.dll
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.11.18.55
ISO_IEC_9899 0/2885
C2nd 0/155
optimization 0/106
end 2021.05.11.21.16
--------------------------
hcc1.exe printf_chk.dll
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.05.18.23
ISO_IEC_9899 0/2885
C2nd 0/155
optimization 0/106
end 2021.06.05.19.40
--------------------------
hcc1.exe printf_chk.dll
Windows 10 64 bit
Visual Studio 2019 16.7.7 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.01.18.30
ISO_IEC_9899 0/2885
C2nd 0/155
optimization 0/106
end 2021.06.01.20.43
--------------------------
hcc1.exe printf_chk.dll
Windows 10 64 bit
Visual Studio 2019 16.10.1 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.14.18.04
ISO_IEC_9899 0/2885
C2nd 0/155
optimization 0/106
end 2021.06.14.19.43
--------------------------
hcc1.exe tacsim.dll
vine linux x86
g++ (10.2.0) -g
bison (2.4.3)
flex (2.5.35)
begin 2021.04.25.12.05
ISO_IEC_9899 0/2821
C2nd 0/157
optimization 0/106
end 2021.04.25.12.14
--------------------------
hcc1.exe tacsim.dll
vine linux x86
g++ (10.2.0) -O3
bison (2.4.3)
flex (2.5.35)
begin 2020.08.02 12:27
ISO_IEC_9899 0/2818
C2nd 0/157
optimization 0/82
end 2020.08.02 12.32
--------------------------
hcc1.exe tacsim.dll
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.04.17.20.49
ISO_IEC_9899 0/2821
C2nd 0/157
optimization 0/106
end 2021.04.17.22.19
--------------------------
hcc1.exe tacsim.dll
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.26.19.01
ISO_IEC_9899 0/2821
C2nd 0/157
optimization 0/106
end 2021.06.26.20.51
--------------------------
hcc1.exe tacsim.dll
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.12.19.08
ISO_IEC_9899 0/2821
C2nd 0/156
optimization 0/106
end 2021.05.13.02.12
--------------------------
hcc1.exe tacsim.dll
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.06.18.45
ISO_IEC_9899 0/2821
C2nd 0/156
optimization 0/106
end 2021.06.06.21.17
--------------------------
hcc1.exe tacsim.dll
Windows 10 64 bit
Visual Studio 2019 16.10.0 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.01.21.14
ISO_IEC_9899 0/2821
C2nd 0/156
optimization 0/106
end 2021.06.02.04.08
--------------------------
hcc1.exe tacsim.dll
Windows 10 64 bit
Visual Studio 2019 16.10.1 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.17.19.48
ISO_IEC_9899 0/2821
C2nd 0/156
optimization 0/106
end 2021.06.17.22.15
--------------------------
hcc1.exe intel.dll
target 64 bit MS code
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.05.13.18.51
ISO_IEC_9899 3/2858       3 processes(hcpp, vs_wrapper) were killed
C2nd 0/155
optimization 0/106
end 2021.05.14.08.46
--------------------------
hcc1.exe intel.dll
target 64 bit MS code
Windows 10 64 bit
g++ (10.1.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2021.06.27.17.10
ISO_IEC_9899 0/2857
C2nd 0/155
optimization 0/106
end 2021.06.28.03.56
--------------------------
hcc1.exe intel.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.13.18.51
ISO_IEC_9899 1/2856      1 process was killed
C2nd 0/155
optimization 0/106
end 2021.05.14.08.46
--------------------------
hcc1.exe intel.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.07.18.30
ISO_IEC_9899 1/2857           1 process (vs_wrapper) was killed
C2nd 0/155
optimization 0/106
end 2021.06.08.04.02
--------------------------
hcc1.exe intel.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.02.18.23
ISO_IEC_9899 0/2857
C2nd 0/155
optimization 0/106
end 2021.06.03.08.05
--------------------------
hcc1.exe intel.dll
target 64 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.1 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2020.12.09.04.20
ISO_IEC_9899 0/2857
C2nd 0/155
optimization 0/106
end 2021.06.19.03.09
--------------------------
hcc1.exe intel.dll
target 32 bit MS code
Windows 10 64 bit
g++ (10.1.0) -g
bison (3.0.4)
flex (2.6.4)
begin 2021.05.01.18.13
ISO_IEC_9899 0/2838
C2nd 0/155
optimization 1/106     1 diff : test019
end 2021.05.02.03.46
--------------------------
hcc1.exe intel.dll
target 32 bit MS code
Windows 10 64 bit
g++ (9.3.0) -O3
bison (3.0.4)
flex (2.6.4)
begin 2020.12.04.19.54
ISO_IEC_9899 6/2836  See Bug #3 about 1 failure
                     See Bug #6 about 3 failures
                     See Bug #7 about 2 failures
C2nd 0/155
optimization 1/82    1 diff : test019.c
end 2020.12.05.06.28
--------------------------
hcc1.exe intel.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.9.4 Debug|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.05.14.17.38
ISO_IEC_9899 1/2857  1 process (vs_wrapper) was killed
C2nd 1/155           1 process (vs_wrapper) was killed
optimization 1/106   1 diff (test019)
end 2021.05.15.07.15
--------------------------
hcc1.exe intel.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x64
bison (3.0.4)
flex (2.6.4)
begin 2021.06.08.18.42
ISO_IEC_9899 0/2857
C2nd 0/155
optimization 1/106      1 diff test019
end 2021.06.09.04.28
--------------------------
hcc1.exe intel.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Debug|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.03.17.46
ISO_IEC_9899 0/2857
C2nd 0/155
optimization 0/106
end 2021.06.04.07.43
--------------------------
hcc1.exe intel.dll
target 32 bit MS code
Windows 10 64 bit
Visual Studio 2019 16.10.0 Release|x86
bison (3.0.4)
flex (2.6.4)
begin 2021.06.19.18.01
ISO_IEC_9899 0/2857
C2nd 0/155
optimization 0/106
end 2021.06.20.03.34
--------------------------
Bug #1

hcxx1.exe tacsimxx.dll Windows g++

43_ISO_IEC_14882/14_Templates/0_Templates/test092.cpp
Expected log:
-------------
::f called
c = 1
N::f called
c = 1.500000
-------------
But no log is output. If simple source:
--------------------------------
extern "C" int printf(const char*, ...);

template<class C> void f(C c)
{
  printf("::f called\n");
  printf("c = %d\n", c);
}

namespace N {
  template<class C> void f(C c)
  {
    printf("N::f called\n");
    printf("c = %f\n", c);
  }
}

int main()
{
  int a = 1;
  f(a);
  double b = 1.5;
  N::f(b);
  return 0;
}
--------------------------------------
is specified, expected log is outputed. But actual preprocessed source is
specified, no log is outputed. If line number infomation is deleted from
acutal preprocessed source, expected log is generated.
--------------------------------------
Bug #2
~/lang/41_ISO_IEC_9899/6_Language/5_Declarations/2_Type_specifiers/1_Structure_and_union_specifiers/1_ok/test010.c
See also ~/hcc1_bug2
--------------------------------------
hcc1.exe intel.dll target MS code

Bug #3

41_ISO_IEC_9899/6_Language/1_Lexical_elements/2_Identifiers/0_Identifiers/1_ok/test015.c
41_ISO_IEC_9899/6_Language/3_Expressions/2_Postfix_operators/2_Function_calls/4_param/test046.c
Error for the generated assembler source line is too long.
=> resolved
--------------------------------------
Bug #5
hcxx1.exe intelxx.dll Windows 10 g++ (VC++ also happened)

14_Templates/0_Templates/test079.cpp

Thread 1 "hcxx1" received signal SIGABRT, Aborted.
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::string const, std::vector<cxx_compiler::usr*, std::allocator<cxx_compiler::usr*> > > > >::deallocate (this=0x0, __p=0x0)
    at /usr/lib/gcc/x86_64-pc-cygwin/9.3.0/include/c++/ext/new_allocator.h:129
129	      }
(gdb) where
#0  __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::string const, std::vector<cxx_compiler::usr*, std::allocator<cxx_compiler::usr*> > > > >::deallocate (this=0x0, __p=0x0)
    at /usr/lib/gcc/x86_64-pc-cygwin/9.3.0/include/c++/ext/new_allocator.h:129
#1  0x000303ea0000c98d in ?? ()
Backtrace stopped: previous frame inner to this frame (corrupt stack?)

If not include stdio.h and directly declare like:

extern "C" int printf(const char*, ...);

This bug is not happend.
--------------------------------------
Bug #6
hcc1.exe intel.dll target 32 bit MS code

41_ISO_IEC_9899/6_Language/2_Conversions/1_Arithmetic_operands/3_Real_floating_and_integer/1_ok/test00[012].c

Unexpected floating point exception occures when test00[012].exe is executed.
--------------------------------------
Bug #7
hcc1.exe intel.dll target 32 bit MS code

41_ISO_IEC_9899/6_Language/3_Expressions/16_Assignment_operators/1_ok/test00[03].c

Unexpected exception occures when test00[03].exe is executed.
--------------------------------------
Bug #9
hcxx1.exe + tacsimxx.dll Debug|x86 & Debug|x64
12_Special_member_functions/0_Special_member_functions/test050.cpp
see ~/bug_9 This test is not well-formed, especially at tacsim environment.
--------------------------------------
Bug #10
hcxx1.exe printf_chkxx.dll Visual Studio Debug|x86
43_ISO_IEC_14882/07_Declarations/5_Linkage_specifications/1_ok/test003.cpp

No repeatablility
1st time : 2020.11.14
--------------------------------------------
Bug #11

Release|x86 only

43_ISO_IEC_14882/14_Templates/0_Templates/test124.cpp

causes syntax error. No repeatablility.
1st time : 2020.11.25.12.29

--------------------------------------------
Bug #12

Release|x86 only

43_ISO_IEC_14882/12_Special_member_functions/0_Special_member_functions/test011.cpp

cause sytax error. No repeatablility.
1st time : 2020.11.26.11.24
---------------------------------------------
Bug #13

Release|x86 tacsimxx.dll Only

43_ISO_IEC_14882/10_Derived_classes/4_Abstract_classes/1_ok:hcxx1.exe test002.cpp

cause sytax error. No repeatablility. No repeatablility.
---------------------------------------------
Bug #14

Release|x86 tacsimxx.dll Only

43_ISO_IEC_14882/12_Special_member_functions/6_Initialization/2_Initializing_bases_and_members/1_ok/test003.cpp

cause sytax error. No repeatablility.
---------------------------------------------
Bug #15

First time : 2020.12.20.05.09
Debug|x64 
No repeatablility. 16.8.2 and 16.9.0
43_ISO_IEC_14882/14_Templates/0_Templates/test{030,101,112}.cpp
hcxx1.exe runtime error
---------------------------------------------
Bug #16
First time 12.28.11.23
g++ (9.3.0) -g

43_ISO_IEC_14882/14_Templates/0_Templates/test196.cpp

% ./test196.exe 
a = 1 b = 2 c = 3
a.m = -13452 b.m = -13456
%

Repeatability exists.
_Z.sub.RK1XRK1X:

	// param .var0x800103300
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-12(%rbp), %rax           <---- ここが間違い
	movq	%rax, %rdx
	// param .var0x8001031f0
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	leaq	-16(%rbp), %rax           <---- ここが間違い
	movq	%rax, %r8
 	// call printf

-------------------------------------------------
Bug #18
43_ISO_IEC_14882/14_Templates/0_Templates/test243.cpp
hcxx1.exe: allocate.cpp:300: void tacsim::allocate::set_value(std::pair<int, cxx_compiler::var*>, void*): Assertion `u->isconstant()' failed.

=> resolved fix tacsimxx.dll
-------------------------------------------------
Bug #19
43_ISO_IEC_14882/14_Templates/0_Templates/test255.cpp
test353.cpp, test355.cpp, test379.cpp

hcxx1.exe: allocate.cpp:204: void tacsim::allocate::usr2(cxx_compiler::usr*): Assertion `size' failed.

=> resolved fix tacsimxx.dll
---------------------------------------------------------
Bug #21
Windows 64 bit
Target GNU code
Visual Studio 2019 16.9.1 Debug|x64
1st time 03.15.04.04

See also ~/lang/21_hcxx1/src/memo2

~/lang/43_ISO_IEC_14882/14_Templates/0_Templates/test203.cpp
hcxx1.exe error.

Run under control of Visual Studio debugger like:

d:/home/khasegawa/lang/43_ISO_IEC_14882/14_Templates/0_Templates/test203.i --generator d:/home/khasegawa/lang/30_intel/src/x64/DebugCXX/intel.dll

But no repeatablility

After test, same operation were done like bellow:

> hcxx1.exe -o test203.s test203.i --generator-option \( --debug \) 
> g++ -g -o test203.exe test203.s
> ./test203.exe > test203.log
> unix2dos test203.log
> diff test203.lo{g,f}

=> resolved
------------------------------------------------------------
Bug #22
Windows 64 bit
Target GNU code
~/lang/43_ISO_IEC_14882/14_Templates/0_Templates/test433.cpp
hcxx1.exe not_implemented

------------------------------------------------------------
Bug #23
dynamic_cast test

43_ISO_IEC_14882/05_Expressions/02_Postfix_expressions/7_Dynamic_cast/1_ok
test002.cpp, test007.cpp : PASS at vine linux but FAIL at Windows

test008.cpp, test009.cpp, test010.cpp : FAIL implementation not complete
--------------------------------------------------------------
Bug #24
tacsimxx.dll Windows Visual Studio Build
> cd d:/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/3_Expressions/6_Additive_operators/1_ok
> hcxx1.exe --generator d:/home/khasegawa/lang/bin/tacsimxx.dll test004.i
`test00' called
3
`test01' called
3
`test02' called
3
`test03' called
3
`test04' called
0                      <--- 3 is expected result
`test05' called
0                      <--- 3 is expected result
`test06' called
0                      <--- 3 is expected result

このバグは Windows 版の tacsim で dynamic_cast の対応が必要だったため
以下の修正を入れた:

#ifdef _MSC_VER
extern "C" DLL_EXPORT
int generator_ptrdiff_type()
{
    using namespace COMPILER;
#ifdef WIN32
    return (int)type::INT;
#else // WIN32
    return (int)type::LONGLONG;
#endif // WIN32
}
#endif // _MSC_VER

この修正を外せば, 期待通り 3 と表示されている.
不明なのが函数 test000,  test001,  test002, test003 がポインタとポインタ
の引き算で同じことをしているのにこっちはできているということ...

hcxx1.exe, hcc1.exe のバグだった.
--------------------------------------------------------------
Bug #25

hcxx1.exe + intelxx.dll vine  linux

wdog.exe : /home/khasegawa/lang/43_ISO_IEC_14882/12_Special_member_functions/0_Special_member_functions:hcxx1.exe -o test106.s test106.i --generator-option ( --debug --x86 ) was killed by wdog.exe

wdog.exe : /home/khasegawa/lang/43_ISO_IEC_14882/12_Special_member_functions/0_Special_member_functions:hcxx1.exe -o test107.s test107.i --generator-option ( --debug --x86 ) was killed by wdog.exe

テスト終了後に実際にやってみた.

> cd /home/khasegawa/lang/43_ISO_IEC_14882/12_Special_member_functions/0_Special_member_functions
> hcxx1.exe -o test106.s test106.i --generator-option \( --debug --x86 \)
> make -n test106.log
wdog.exe -v g++ -g -o test106.exe test106.s
wdog.exe -v  ./test106.exe > test106.log
dos2unix.csh test106.log
> make -n test106.lof
wdog.exe -v g++ -g -o test106.exe test106.s
wdog.exe -v  ./test106.exe > test106.log
dos2unix.csh test106.log
wdog.exe -v diff test106.log test106.lof
touch test106.lof
> make test106.lof
wdog.exe -v g++ -g -o test106.exe test106.s

wdog.exe -v  ./test106.exe > test106.log
dos2unix.csh test106.log
wdog.exe -v diff test106.log test106.lof
touch test106.lof
> > hcxx1.exe -o test107.s test107.i --generator-option \( --debug --x86 \)
> make test107.lof
wdog.exe -v g++ -g -o test107.exe test107.s
wdog.exe -v  ./test107.exe > test107.log
dos2unix.csh test107.log
wdog.exe -v diff test107.log test107.lof
touch test107.lof
> 

たしかに少し時間がかかっている.


> wdog.exe -v hcxx1.exe -o test107.s test107.i --generator-option \( --debug --x86 \)
> wdog.exe -v hcxx1.exe -o test106.s test106.i --generator-option \( --debug --x86 \)
> 

いずれも成功している.
2021/04/15

setenv DOG_ALARM 10

これを ~/.tcshrc の中にいれておいた.
------------------------------------------
Bug #26

~/lang/20_hcc1/src/memo 参照

------------------------------------------
Bug #27
wdog : /cygdrive/d/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/4_Function_specifiers/1_ok:hcc1.exe test024.i

Windows 10 hcc1.exe + printf_chk.dll

% cd d:/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/4_Function_specifiers/1_ok
% hcc1.exe test024.i --generator ~/lang/bin/printf_chk.dll
で再現する.
% gdb ~/lang/bin/hcc1.exe
(gdb) run test024.i --generator ~/lang/bin/printf_chk.dll
Thread 1 "hcc1" received signal SIGABRT, Aborted.
operator delete (ptr=0x0) at ../../.././libstdc++-v3/libsupc++/del_op.cc:50
50	}
(gdb)

これは Bug #26 と同じような状況. やはり調査には cygwin1.dll のビルドが必要.

------------------------------------------------------------------------
Bug #28
wdog : /cygdrive/d/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/2_Type_specifiers/1_Structure_and_union_specifiers/1_ok:hcc1.exe -o test018.s test018.i --generator-option ( --debug )

delete でエラーする例のエラー Bug #27 と同じ.
------------------------------------------------------------------------
Bug #29

~/lang/21_hcxx1/src/bug29.txt
-----------------------------------------------------------------------
Bug #30  => resolved.
d:/home/khasegawa/lang/43_ISO_IEC_14882/12_Special_member_functions/6_Initialization/2_Initializing_bases_and_members/1_ok/test001.cpp

hcxx1.exe intelxx.dll --generator-option \( --ms --x86 --debug \)

テストプログラム test001.exe の結果が
d.x = 12
d.y = 11
d.b.x = 14
d.c = 13
が期待値だが
d.x = 12
d.y = 11
d.b.x = 10657800
d.c = 13
のように d.b.x の表示結果が違っている.

D のレイアウトは

+---------------+
|               |  D::B1
+---------------+
|               |  D::B2
+---------------+
|               |  D::b
+---------------+
|               |  D::c
+---------------+

のようになっている. b はオフセット 8 である.
なので d.b.x を printf に渡しているときのアドレスは正しい.
ということは, 初期化の段階で間違えているということだろうか?

+---------------+             0x00d9a000
|     12(c)     |  D::B1
+---------------+
|     11(b)     |  D::B2
+---------------+
|  0x00d9a008   |  D::b     << 間違えている.
+---------------+
|     13(d)     |  D::c
+---------------+

> Debug.print *(int*)0x00d9a000
c
> Debug.print *(int*)0x00d9a004
b
> Debug.print *(int*)0x00d9a008
0x00d9a008                         << 間違えている
> Debug.print *(int*)0x00d9a00c
d

どうやら実行するたびにアドレスが変わるようなことはないらしい.
_test_main にきたときすでに書き換わっている.

main が呼ばれたときに既に書き換わっている.

B1 のコンストラクタでメンバ x に値をセットしているのは以下の部分で

B1::B1(int xx) : x(xx) {}

test001.asm でいうと以下:

	; *.var0x8001d0270 := xx
	mov 	ecx, DWORD PTR [ebp-8]
	mov 	eax, DWORD PTR [ebp+16]
	mov	[ecx], eax                 (*)

最初の B1::B1 の呼び出しでは期待通り (*) のところで eax = 0xc = 12
になっている.
しかし問題の 2 回目の呼び出しでは (*) のところで eax = 0xe = 14 が
期待値だが 0x00d9a008 になっている. これは B1::this の値.

B1 のコンストラクタで this と xx はそれぞれ ebp+12, ebp+16 に格納されている

1 回目の呼び出し
>Debug.print *(int*)(ebp+12)
0x00d9a000
>Debug.print *(int*)(ebp+16)
0x0000000c
>

できている.

2 回目の呼び出し
>Debug.print *(int*)(ebp+12)
0x00d9a008
>Debug.print *(int*)(ebp+16)
0x00d9a008                     <<<< できていない

> Debug.print ebp
0x0133f984

ということは 0x0133f984 + 16 = 0x0133f994 に書き込む値を間違えている.


>Debug.print esp
0x010ffc88
>Debug.print ebp-32
0x010ffc88

スタックが十分に確保されていないのが原因.

??0D@D@@@@H@Z	PROC
	; enter
	push 	ebp
	push 	ebx
	mov 	ebp, esp
	sub 	esp, 32

例えば 32 ではなくて 64 にすれば期待通り動作する.
D のコンストラクタのスタックスケジューリングが間違っている.

gdb からスタックサイズ 32 になる状況を作りだせた.

#if 0
  stack::local_area += func_local(func, ms_handler);
#else
  stack::local_area = func_local(func, ms_handler);
#endif

なんだか覚えているけど, この修正が影響して結果的にレベルダウンしたらしい.

decide_local を思い切って変更してみた.

int intel::decide_local(int offset, COMPILER::var* v)
{
  using namespace std;
  using namespace COMPILER;
  usr* u = v->usr_cast();
  usr::flag_t f = u ? u->m_flag : usr::NONE;
  assert(!(f & usr::flag_t(usr::FUNCTION | usr::TYPEDEF)));
  map<var*, address*>& tbl = address_descriptor.second;
  if (f & usr::CONST_PTR) {
    assert(tbl.find(v) != tbl.end());
    return offset;
  }
  const type* T = v->m_type;
#if 0
  int size = (f & usr::VL) ? psize() : T->size();
  offset += size;
#endif
  int al = (f & usr::VL) ? psize() : T->align();
  offset = align(offset, al);
  if (f & usr::VL){
    assert(tbl.find(v) == tbl.end());
    tbl[v] = new allocated(-offset);
    if ( !allocated::base ){
      offset += psize();
      allocated::base = offset;
    }
  }
  else {
    assert(tbl.find(v) == tbl.end());
    tbl[v] = new stack(v, -offset);
  }
#if 0
  return offset;
#else
  int size = (f & usr::VL) ? psize() : T->size();  
  return offset + size;
#endif
}

これで一応スタックのサイズは 32 のままでテストに PASS している.
これは, ... linux 版の hcc1.exe+intel.dll, hcxx1.exe+intelxx.dll
も再テストが必要だ. 勿論 Windows 版もそうなる.

=> 残念ながら linux 版でレベルダウンしている. 勿論上の修正をもとに戻せば
   hcc1.exe + intel.dll は全 PASS する.

   おそらく最初の設計では offset 引数の意味は,

   ebp-offset は既に使用しているからそのさらに offset を増やしたところに
   ローカル変数を置けということなのだろう.

GNU 32 bit
       pushl   %ebp
       movl    %esp, %ebp
       pushl   %ebx
       subl    $160, %esp

+-------------+ <- esp(new)
|             |
|             |
|             |
|             |
|             |
|             |
|             |
+-------------+
|   ebx(old)  |
+-------------+ <- ebp(new)
|   ebp(old)  |
+-------------+ <- esp(old)


MS 32 bit
	push 	ebp
	push 	ebx
	mov 	ebp, esp
	sub 	esp, 32

+-------------+ <- esp(new)
|             |
|             |
|             |
|             |
|             |
|             |
|             |
+-------------+ <- ebp(new)
|   ebx(old)  |
+-------------+
|   ebp(old)  |
+-------------+ <- esp(old)

        
        スタックフレームの構造が少し違っている.
	GNU 32 bit で例の修正を入れれば ebx(old) の部分が変更されるから
	正しく動かなくなるのは理解できる.
	一方 MS 32 bit で例の修正を入れても ebx(old) の部分は変更されな
	いから必ずしも正しく動かなくなるわけではない.

2021/05/05

   以下の修正をいれてみた:

   const type* T = v->m_type;
   int size = (f & usr::VL) ? psize() : T->size();
+  if (mode == GNU || x64)
+    offset += size;
-  offset += size;
   int al = (f & usr::VL) ? psize() : T->align();
   offset = align(offset, al);
   if (f & usr::VL){
@@ -1382,9 +1381,7 @@ int intel::decide_local(int offset, COMPILER::var* v)
     assert(tbl.find(v) == tbl.end());
     tbl[v] = new stack(v, -offset);
   }
+  if (mode == GNU || x64)
+    return offset;
+  return offset + size;
-  return offset;
 }

   一応 linux 32 bit 版は hcc1 + intel.dll で全 PASS したが,
   MS 32 bit 版は激しくレベルダウンしている.

   このレベルダウンを受けて, 一旦上の修正はキャンセルし以下のように修正した:
   
#ifdef CXX_GENERATOR
#if 0
  stack::local_area += func_local(func, ms_handler);
#else
  if (mode == GNU || x64)
    stack::local_area = func_local(func, ms_handler);
  else
    stack::local_area += func_local(func, ms_handler);
#endif
#else // CXX_GENERATOR
#if 0
  stack::local_area += func_local(func);
#else
  if (mode == GNU || x64)
    stack::local_area = func_local(func);
  else
    stack::local_area += func_local(func);
#endif
#endif // CXX_GENERATOR

   これは間違い. 単純に D::D で使用しているローカル変数が 7 つで
   7 * 4 = 28 で函数呼び出しで 2 つ分だから 4 * 2  = 8
   すなわち 36 バイトスタックにとるのが正しい.

        +-------------------+ <- esp(new)
    36  | 函数呼び出しの引数1 |
    32  | .var0x800091930   || 函数呼び出しの引数2 |
    28  | .var0x800090780   |
    24  | .var0x80008e360   |
    20  | .var0x800090bc0   |
    16  | .var0x800091070   |
    12  | .var0x800090b20   |
     8  | .var0x800090a80   |
     4  | 現状使っていない    |
        +-------------------+ <- ebp(new)
        |   ebx(old)        |
        +-------------------+
        |   ebp(old)        |
        +-------------------+ <- esp(old)

  ebp-4 を使うならば 36 バイトで十分.(アラインメントを考慮していないが)
  ebp-4 を使わないのならば 40 バイト.

call_arg::calculate(code)  0 を返している. 8 を返すのが期待値.

#ifdef CXX_GENERATOR
    if (!T) {
      p = q + 1;
      n = max(n, m);  ここが抜けていた.
      continue;
    }
#endif // CXX_GENERATOR

----------------------------------------------------------------
Bug #31
wdog : /cygdrive/d/home/khasegawa/lang/43_ISO_IEC_14882/07_Declarations/3_Namespaces/3_The_using_declaration/1_ok:hcxx1.exe -o test009.s test009.i --generator-option ( --debug )

After test, again execute hcxx1.exe but not reproduced.
---------------------------------------------------------------
Bug #32

hcxx1.exe + printf_chkxx.dll Debug|x86

wdog : /cygdrive/d/home/khasegawa/lang/43_ISO_IEC_14882/07_Declarations/5_Linkage_specifications/1_ok:hcxx1.exe test005.i
After test, again execute hcxx1.exe but not reproduced.
---------------------------------------------------------------
Bug #33
43_ISO_IEC_14882/12_Special_member_functions/7_Construction_and_destruction/1_ok/test008.cpp

hcxx1.exe + intelxx.dll Debug|x86 target MS 64 bit code

Debug|x64 で target MS 64 bit code

であれば PASS していたのでちょっとした問題のように思える.

d:/tmp/y2

をテストプログラムのあるディレクトリで実行すれば再現する.

修正は以下.

 || defined(WIN32)

がないためこのバグが発生していた.

#if defined(__x86_64__) || defined(_WIN64) || defined(WIN32)
extern "C" DLL_EXPORT
int generator_ptrdiff_type()
{
  using namespace COMPILER;
  if (intel::mode == intel::MS && intel::x64 )
    return type::LONGLONG;
  return type::LONG;
}
#endif // defined(__x86_64__) || defined(_WIN64) || defined(WIN32)

---------------------------------------------------------------
Bug #34

wdog : /cygdrive/d/home/khasegawa/lang/43_ISO_IEC_14882/12_Special_member_functions/0_Special_member_functions:./test123.exe

After test, tried to execute test123.exe generated at the test

% ./test123.exe
s.p = 0
%

worked as expected.
----------------------------------------------------------------
Bug #35
wdog : /cygdrive/d/home/khasegawa/lang/42_C2nd:hcxx1.exe -o test015.asm test015.i --generator-option ( --debug --x86 --ms )

After test, executed the same command, but not reproduced.
------------------------------------------------------------------
Bug #36
wdog : /cygdrive/d/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/2_Type_specifiers/1_Structure_and_union_specifiers/1_ok:hcc1.exe -o test018.s test018.i --generator-option ( --debug )

wdog : /cygdrive/d/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/4_Function_specifiers/1_ok:hcc1.exe -o test024.s test024.i --generator-option ( --debug ) 

After test, above could be reproduced.
> cd d:/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/2_Type_specifiers/1_Structure_and_union_specifiers/1_ok
> hcc1.exe -o test018.s test018.i --generator-option \( --debug \)
Abort(core dumped)
> cd d:/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/4_Function_specifiers/1_ok
> hcc1.exe -o test024.s test024.i --generator-option \( --debug \) 
Abort(core dumped)
>
------------------------------------------------------------------
Bug #37
wdog : /cygdrive/d/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/2_Type_specifiers/1_Structure_and_union_specifiers/1_ok:hcc1.exe test018.i

After test, I could reproduce the bug:

> cd d:/home/khasegawa/lang/41_ISO_IEC_9899/6_Language/5_Declarations/2_Type_specifiers/1_Structure_and_union_specifiers/1_ok
> hcc1.exe test018.i --generator ~/lang/bin/printf_chk.dll
Abort(core dumped)
>
